package com.ai.aiga.domain;
// Generated 2017-4-25 15:20:20 by Hibernate Tools 3.2.2.GA

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Tasks generated by hbm2java
 */
@Entity
@Table(name = "TASKS")
public class Tasks implements java.io.Serializable {

	private long id;
	private String taskName;
	private short taskType;
	private String taskClass;
	private short taskTriggerType;
	private String taskCategory;
	private Date executeTime;
	private Long intervalTime;
	private Long intervalCount;
	private String cronExpression;
	private short status;
	private Date finishTime;
	private String exceptionDetail;
	private Long creatorId;
	private Date createTime;
	private Long updateId;
	private Date updateTime;

	private List<TasksParameter> parameters = new ArrayList<TasksParameter>();

	public Tasks() {
	}

	public Tasks(long id, String taskName, short taskType, String taskClass, short taskTriggerType, short status,
			Date createTime) {
		this.id = id;
		this.taskName = taskName;
		this.taskType = taskType;
		this.taskClass = taskClass;
		this.taskTriggerType = taskTriggerType;
		this.status = status;
		this.createTime = createTime;
	}

	public Tasks(long id, String taskName, short taskType, String taskClass, short taskTriggerType, String taskCategory,
			Date executeTime, Long intervalTime, Long intervalCount, String cronExpression, short status,
			Date finishTime, String exceptionDetail, Long creatorId, Date createTime, Long updateId, Date updateTime) {
		this.id = id;
		this.taskName = taskName;
		this.taskType = taskType;
		this.taskClass = taskClass;
		this.taskTriggerType = taskTriggerType;
		this.taskCategory = taskCategory;
		this.executeTime = executeTime;
		this.intervalTime = intervalTime;
		this.intervalCount = intervalCount;
		this.cronExpression = cronExpression;
		this.status = status;
		this.finishTime = finishTime;
		this.exceptionDetail = exceptionDetail;
		this.creatorId = creatorId;
		this.createTime = createTime;
		this.updateId = updateId;
		this.updateTime = updateTime;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "TASKS$SEQ")
	@SequenceGenerator(name = "TASKS$SEQ", sequenceName = "TASKS$SEQ", allocationSize = 1)
	@Column(name = "ID", unique = true, nullable = false, precision = 14, scale = 0)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@Column(name = "TASK_NAME", nullable = false, length = 200)
	public String getTaskName() {
		return this.taskName;
	}

	public void setTaskName(String taskName) {
		this.taskName = taskName;
	}

	@Column(name = "TASK_TYPE", nullable = false, precision = 4, scale = 0)
	public short getTaskType() {
		return this.taskType;
	}

	public void setTaskType(short taskType) {
		this.taskType = taskType;
	}

	@Column(name = "TASK_CLASS", nullable = false, length = 200)
	public String getTaskClass() {
		return this.taskClass;
	}

	public void setTaskClass(String taskClass) {
		this.taskClass = taskClass;
	}

	@Column(name = "TASK_TRIGGER_TYPE", nullable = false, precision = 4, scale = 0)
	public short getTaskTriggerType() {
		return this.taskTriggerType;
	}

	public void setTaskTriggerType(short taskTriggerType) {
		this.taskTriggerType = taskTriggerType;
	}

	@Column(name = "TASK_CATEGORY", length = 200)
	public String getTaskCategory() {
		return this.taskCategory;
	}

	public void setTaskCategory(String taskCategory) {
		this.taskCategory = taskCategory;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "EXECUTE_TIME", length = 11)
	public Date getExecuteTime() {
		return this.executeTime;
	}

	public void setExecuteTime(Date executeTime) {
		this.executeTime = executeTime;
	}

	@Column(name = "INTERVAL_TIME", precision = 14, scale = 0)
	public Long getIntervalTime() {
		return this.intervalTime;
	}

	public void setIntervalTime(Long intervalTime) {
		this.intervalTime = intervalTime;
	}

	@Column(name = "INTERVAL_COUNT", precision = 14, scale = 0)
	public Long getIntervalCount() {
		return this.intervalCount;
	}

	public void setIntervalCount(Long intervalCount) {
		this.intervalCount = intervalCount;
	}

	@Column(name = "CRON_EXPRESSION", length = 100)
	public String getCronExpression() {
		return this.cronExpression;
	}

	public void setCronExpression(String cronExpression) {
		this.cronExpression = cronExpression;
	}

	@Column(name = "STATUS", nullable = false, precision = 4, scale = 0)
	public short getStatus() {
		return this.status;
	}

	public void setStatus(short status) {
		this.status = status;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "FINISH_TIME", length = 11)
	public Date getFinishTime() {
		return this.finishTime;
	}

	public void setFinishTime(Date finishTime) {
		this.finishTime = finishTime;
	}

	@Column(name = "EXCEPTION_DETAIL", length = 2000)
	public String getExceptionDetail() {
		return this.exceptionDetail;
	}

	public void setExceptionDetail(String exceptionDetail) {
		this.exceptionDetail = exceptionDetail;
	}

	@Column(name = "CREATOR_ID", precision = 14, scale = 0)
	public Long getCreatorId() {
		return this.creatorId;
	}

	public void setCreatorId(Long creatorId) {
		this.creatorId = creatorId;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATE_TIME", nullable = false, length = 11)
	public Date getCreateTime() {
		return this.createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	@Column(name = "UPDATE_ID", precision = 14, scale = 0)
	public Long getUpdateId() {
		return this.updateId;
	}

	public void setUpdateId(Long updateId) {
		this.updateId = updateId;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "UPDATE_TIME", length = 11)
	public Date getUpdateTime() {
		return this.updateTime;
	}

	public void setUpdateTime(Date updateTime) {
		this.updateTime = updateTime;
	}

	@OneToMany(cascade = { CascadeType.REFRESH }, fetch = FetchType.EAGER, mappedBy = "taskId")
	public List<TasksParameter> getParameters() {
		return parameters;
	}

	public void setParameters(List<TasksParameter> parameters) {
		this.parameters = parameters;
	}

	

}
