package com.ai.aiga.dao;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;

import com.ai.aiga.dao.jpa.SearchAndPageRepository;
import com.ai.aiga.domain.NaCaseConstructionReport;

/**
 * @ClassName: NaCaseContructionDao
 * @author: dongch
 * @date: 2017年4月24日 下午3:49:10
 * @Description:
 * 
 */
public interface NaCaseContructionReportDao extends JpaRepository<NaCaseConstructionReport, Long>, SearchAndPageRepository<NaCaseConstructionReport, Long>{


	@Query("select sysId, funNum, caseNumQrelease, autoCaseNumQrelease, autoCaseCoverQrelease, caseNumRelease, autoCaseNumRelease, autoCaseCoverRelease from NaCaseConstructionReport where reportType = ?1 and statisticalMonth = ?2")
	List<Object> findOld(Long type, String lastMonth);

	@Query(value = "SELECT SYS_ID ,COUNT(1) FROM (SELECT  S.SYS_ID,F.FUN_ID FROM  AIGA_FUN_FOLDER F,  AIGA_SYSTEM_FOLDER S WHERE  F.SYS_ID = S.SYS_ID  AND S.IMPORTANT_CLASS=1 AND F.IMPORTANT_CLASS IN(1,2,3) GROUP BY S.SYS_ID,F.FUN_ID ) GROUP BY SYS_ID", nativeQuery = true)
	List<Object> findSysFunCount();

	@Query(value = "SELECT SYS_ID, COUNT(1) FROM (SELECT S.SYS_ID, F.FUN_ID FROM NA_AUTO_CASE A, AIGA_FUN_FOLDER F, AIGA_SYSTEM_FOLDER S WHERE A.FUN_ID = F.SYS_ID AND F.SYS_ID = S.SYS_ID AND S.IMPORTANT_CLASS = 1 AND F.IMPORTANT_CLASS IN (1, 2, 3) AND A.IMPORTANT IN (1, 2, 3)  GROUP BY S.SYS_ID, F.FUN_ID) GROUP BY SYS_ID", nativeQuery = true)
	List<Object> findSysFunCover();

	@Query(value = " SELECT SYS_ID, COUNT(1) FROM (SELECT S.SYS_ID, A.AUTO_ID FROM NA_AUTO_CASE A, AIGA_FUN_FOLDER F, AIGA_SYSTEM_FOLDER S WHERE A.FUN_ID = F.SYS_ID AND F.SYS_ID = S.SYS_ID AND S.IMPORTANT_CLASS = 1 AND F.IMPORTANT_CLASS IN (1, 2, 3) AND A.IMPORTANT IN (1, 2, 3) AND A.ENVIRONMENT_TYPE = ?1 AND A.UPDATE_TIME < (ADD_MONTHS(TRUNC(TO_DATE(?2,'YYYYMM'),'MM'),1)) GROUP BY S.SYS_ID, A.AUTO_ID) GROUP BY SYS_ID", nativeQuery = true)
	List<Object> findSysCaseCountA(Long type, String dayOrMonth);
	
	@Query(value = " SELECT SYS_ID, COUNT(1) FROM (SELECT S.SYS_ID, A.AUTO_ID FROM NA_AUTO_CASE A, AIGA_FUN_FOLDER F, AIGA_SYSTEM_FOLDER S WHERE A.FUN_ID = F.SYS_ID AND F.SYS_ID = S.SYS_ID AND S.IMPORTANT_CLASS = 1 AND F.IMPORTANT_CLASS IN (1, 2, 3) AND A.IMPORTANT IN (1, 2, 3) AND A.ENVIRONMENT_TYPE = ?1 AND A.UPDATE_TIME < (TRUNC(TO_DATE(?2,'YYYYMMDD'),'DD')) GROUP BY S.SYS_ID, A.AUTO_ID) GROUP BY SYS_ID", nativeQuery = true)
	List<Object> findSysCaseCountB(Long type, String dayOrMonth);

	@Query(value = " SELECT SYS_ID, COUNT(1) FROM (SELECT S.SYS_ID, A.AUTO_ID FROM NA_AUTO_CASE A, AIGA_FUN_FOLDER F, AIGA_SYSTEM_FOLDER S WHERE A.FUN_ID = F.SYS_ID AND F.SYS_ID = S.SYS_ID AND S.IMPORTANT_CLASS = 1 AND F.IMPORTANT_CLASS IN (1, 2, 3) AND A.IMPORTANT IN (1, 2, 3) AND A.ENVIRONMENT_TYPE = ?1 AND A.UPDATE_TIME < (ADD_MONTHS(TRUNC(TO_DATE(?2,'YYYYMM'),'MM'),1)) AND A.HAS_AUTO = 1 GROUP BY S.SYS_ID, A.AUTO_ID) GROUP BY SYS_ID", nativeQuery = true)
	List<Object> findSysAutoA(Long type, String dayOrMonth);
	
	@Query(value = " SELECT SYS_ID, COUNT(1) FROM (SELECT S.SYS_ID, A.AUTO_ID FROM NA_AUTO_CASE A, AIGA_FUN_FOLDER F, AIGA_SYSTEM_FOLDER S WHERE A.FUN_ID = F.SYS_ID AND F.SYS_ID = S.SYS_ID AND S.IMPORTANT_CLASS = 1 AND F.IMPORTANT_CLASS IN (1, 2, 3) AND A.IMPORTANT IN (1, 2, 3) AND A.ENVIRONMENT_TYPE = ?1 AND A.UPDATE_TIME < (TRUNC(TO_DATE(?2,'YYYYMMDD'),'DD')) AND A.HAS_AUTO = 1 GROUP BY S.SYS_ID, A.AUTO_ID) GROUP BY SYS_ID", nativeQuery = true)
	List<Object> findSysAutoB(Long type, String dayOrMonth);

	@Query(value = "SELECT SYS_ID, COUNT(1) FROM (SELECT S.SYS_ID,B.BUSI_ID FROM (SELECT DISTINCT TRIM(REGEXP_SUBSTR(DECODE(SUBSTR(BUSI_LABEL, -1), ',', SUBSTR(BUSI_LABEL, 1, LENGTH(BUSI_LABEL) - 1), BUSI_LABEL), '[^,]+', 1, LEVEL)) LAB, AI.FUN_ID, AI.IS_INVALID, AI.SYS_ID, AI.IMPORTANT_CLASS FROM AIGA_FUN_FOLDER AI CONNECT BY LEVEL <= LENGTH(DECODE(SUBSTR(BUSI_LABEL, -1), ',',SUBSTR(BUSI_LABEL, 1, LENGTH(BUSI_LABEL) - 1), BUSI_LABEL)) - LENGTH(REPLACE(BUSI_LABEL, ',')) + 1 AND PRIOR FUN_ID = FUN_ID AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL)  F, AIGA_SYSTEM_FOLDER S,NA_BUSINESS B WHERE F.SYS_ID = S.SYS_ID AND S.IMPORTANT_CLASS = 1 AND F.IMPORTANT_CLASS IN (1, 2, 3) AND B.IMPORTANT IN (1, 2, 3) AND F.LAB = B.BUSI_NAME AND F.IS_INVALID = 0 AND B.INVALID = 0 GROUP BY S.SYS_ID, B.BUSI_ID) GROUP BY SYS_ID", nativeQuery = true)
	List<Object> findBusiCount();

	@Query(value = "SELECT SYS_ID, COUNT(1) FROM (SELECT SYS_ID, BUSI_ID FROM (SELECT F1.SYS_ID, F1.BUSI_ID, T.AUTO_ID FROM NA_AUTO_CASE T, (SELECT S.SYS_ID, B.BUSI_ID, F.FUN_ID FROM (SELECT DISTINCT TRIM(REGEXP_SUBSTR(DECODE(SUBSTR(BUSI_LABEL, -1), ',', SUBSTR(BUSI_LABEL, 1, LENGTH(BUSI_LABEL) - 1), BUSI_LABEL), '[^,]+', 1, LEVEL)) LAB, AI.FUN_ID, AI.IS_INVALID, AI.SYS_ID, AI.IMPORTANT_CLASS FROM AIGA_FUN_FOLDER AI CONNECT BY LEVEL <= LENGTH(DECODE(SUBSTR(BUSI_LABEL, -1), ',', SUBSTR(BUSI_LABEL, 1, LENGTH(BUSI_LABEL) - 1), BUSI_LABEL)) - LENGTH(REPLACE(BUSI_LABEL, ',')) + 1 AND PRIOR FUN_ID = FUN_ID AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL) F, AIGA_SYSTEM_FOLDER S, NA_BUSINESS B WHERE F.SYS_ID = S.SYS_ID AND S.IMPORTANT_CLASS = 1 AND F.IMPORTANT_CLASS IN (1, 2, 3) AND B.IMPORTANT IN (1, 2, 3) AND F.LAB = B.BUSI_NAME AND F.IS_INVALID = 0 AND B.INVALID = 0) F1 WHERE  T.FUN_ID = F1.FUN_ID AND  T.IMPORTANT IN (1, 2, 3) GROUP BY F1.SYS_ID, F1.BUSI_ID, T.AUTO_ID) GROUP BY SYS_ID, BUSI_ID) GROUP BY SYS_ID", nativeQuery = true)
	List<Object> findbusiCover();

	@Modifying
	@Query("delete NaCaseConstructionReport where reportType = 1 and statisticalMonth = ?1")
	void delete(String currentMonth);

	@Query(value = "SELECT BUSI_ID ,COUNT(1) FROM (SELECT B.BUSI_ID,A.FUN_ID FROM (SELECT DISTINCT TRIM(REGEXP_SUBSTR(DECODE(SUBSTR(BUSI_LABEL, -1), ',', SUBSTR(BUSI_LABEL, 1, LENGTH(BUSI_LABEL) - 1), BUSI_LABEL), '[^,]+', 1, LEVEL)) LAB, AI.FUN_ID, AI.IS_INVALID, AI.SYS_NAME, AI.IMPORTANT_CLASS FROM AIGA_FUN_FOLDER AI  CONNECT BY LEVEL <= LENGTH(DECODE(SUBSTR(BUSI_LABEL, -1), ',', SUBSTR(BUSI_LABEL, 1, LENGTH(BUSI_LABEL) - 1), BUSI_LABEL)) - LENGTH(REPLACE(BUSI_LABEL, ',')) + 1 AND PRIOR FUN_ID = FUN_ID AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL) A, NA_BUSINESS B WHERE A.LAB = B.BUSI_NAME AND A.IS_INVALID = 0 AND B.INVALID = 0  AND B.IMPORTANT IN (1, 2, 3) AND A.IMPORTANT_CLASS IN (1, 2, 3) GROUP BY B.BUSI_ID,A.FUN_ID) GROUP BY BUSI_ID", nativeQuery = true)
	List<Object> findBusiFunCount();

	@Query(value = "SELECT BUSI_ID ,COUNT(1) FROM (SELECT F.BUSI_ID,T.FUN_Id  FROM NA_AUTO_CASE T, (SELECT B.BUSI_ID,A.FUN_ID FROM (SELECT DISTINCT TRIM(REGEXP_SUBSTR(DECODE(SUBSTR(BUSI_LABEL, -1), ',', SUBSTR(BUSI_LABEL, 1, LENGTH(BUSI_LABEL) - 1), BUSI_LABEL), '[^,]+',  1, LEVEL)) LAB,  AI.FUN_ID, AI.IS_INVALID, AI.SYS_NAME, AI.IMPORTANT_CLASS  FROM AIGA_FUN_FOLDER AI CONNECT BY LEVEL <= LENGTH(DECODE(SUBSTR(BUSI_LABEL, -1), ',', SUBSTR(BUSI_LABEL,  1, LENGTH(BUSI_LABEL) - 1), BUSI_LABEL)) - LENGTH(REPLACE(BUSI_LABEL, ',')) + 1 AND PRIOR FUN_ID = FUN_ID  AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL) A, NA_BUSINESS B WHERE A.LAB = B.BUSI_NAME  AND A.IS_INVALID = 0  AND B.INVALID = 0 AND B.IMPORTANT IN (1, 2, 3)  AND A.IMPORTANT_CLASS IN (1, 2, 3)) F  WHERE  T.FUN_ID = F.FUN_ID   AND T.IMPORTANT IN (1, 2, 3) GROUP BY F.BUSI_ID,T.FUN_Id ) GROUP BY BUSI_ID", nativeQuery = true)
	List<Object> findBusiFunCover();

	@Query(value = "SELECT BUSI_ID ,COUNT(1) FROM (SELECT F.BUSI_ID, T.AUTO_ID FROM NA_AUTO_CASE T, (SELECT  B.BUSI_ID,A.FUN_ID　FROM (SELECT DISTINCT TRIM(REGEXP_SUBSTR(DECODE(SUBSTR(BUSI_LABEL, -1), ',', SUBSTR(BUSI_LABEL, 1, LENGTH(BUSI_LABEL) - 1),　BUSI_LABEL), '[^,]+', 1, LEVEL)) LAB, AI.FUN_ID, AI.IS_INVALID, AI.SYS_NAME,　AI.IMPORTANT_CLASS FROM AIGA_FUN_FOLDER AI CONNECT BY LEVEL <= LENGTH(DECODE(SUBSTR(BUSI_LABEL, -1),　',',  SUBSTR(BUSI_LABEL,  1, LENGTH(BUSI_LABEL) - 1), BUSI_LABEL)) - LENGTH(REPLACE(BUSI_LABEL, ',')) + 1　AND PRIOR FUN_ID = FUN_ID AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL) A, NA_BUSINESS B WHERE A.LAB = B.BUSI_NAME AND A.IS_INVALID = 0 AND B.IS_INVALID = 0 AND B.IMPORTANT IN (1, 2, 3) ) F WHERE  T.FUN_ID = F.FUN_ID AND  T.IMPORTANT IN (1, 2, 3) AND (T.UPDATE_TIME IS NULL OR T.CREATE_TIME < (?1) ) AND T.ENVIRONMENT_TYPE = ?2 GROUP BY F.BUSI_ID,T.AUTO_ID ) GROUP BY BUSI_ID", nativeQuery = true)
	List<Object> findBusiCaseCount(String dayOrMonth, Long type);

	@Query(value = "SELECT BUSI_ID ,COUNT(1) FROM (SELECT F.BUSI_ID, T.AUTO_ID FROM NA_AUTO_CASE T, (SELECT  B.BUSI_ID,A.FUN_ID　FROM (SELECT DISTINCT TRIM(REGEXP_SUBSTR(DECODE(SUBSTR(BUSI_LABEL, -1), ',', SUBSTR(BUSI_LABEL, 1, LENGTH(BUSI_LABEL) - 1),　BUSI_LABEL), '[^,]+', 1, LEVEL)) LAB, AI.FUN_ID, AI.IS_INVALID, AI.SYS_NAME,　AI.IMPORTANT_CLASS FROM AIGA_FUN_FOLDER AI CONNECT BY LEVEL <= LENGTH(DECODE(SUBSTR(BUSI_LABEL, -1),　',',  SUBSTR(BUSI_LABEL,  1, LENGTH(BUSI_LABEL) - 1), BUSI_LABEL)) - LENGTH(REPLACE(BUSI_LABEL, ',')) + 1　AND PRIOR FUN_ID = FUN_ID AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL) A, NA_BUSINESS B WHERE A.LAB = B.BUSI_NAME AND A.IS_INVALID = 0 AND B.IS_INVALID = 0 AND B.IMPORTANT IN (1, 2, 3) ) F WHERE  T.FUN_ID = F.FUN_ID AND  T.IMPORTANT IN (1, 2, 3) AND (T.UPDATE_TIME IS NULL OR T.CREATE_TIME < (?1) ) AND T.ENVIRONMENT_TYPE = ?2 AND T.HAS_AUTO = 1 GROUP BY F.BUSI_ID,T.AUTO_ID ) GROUP BY BUSI_ID", nativeQuery = true)
	List<Object> findBusiAuto(String dayOrMonth, Long type);

}

